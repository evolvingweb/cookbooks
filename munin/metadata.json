{
  "name": "munin",
  "description": "Installs and configures munin",
  "long_description": "DESCRIPTION\n====\n\nInstalls and configures Munin for a server and for clients using Chef 0.8 search capabilities.\n\nREQUIREMENTS\n====\n\nRequires Chef 0.8+ for search capability of roles and data bags.\n\nThe monitoring server that uses this recipe should have a role named 'monitoring'. A role named after the environment (e.g., \"production\") and a node attribute `app_environment` with a value of the same should be created for all nodes. The server uses this to search for only nodes that belong to its same environment.\n\nBecause of the heavy use of search, this recipe will not work with Chef Solo, as it cannot do any searches without a server.\n\nPlatform\n----\n\nTested on Ubuntu 9.04, Ubuntu 9.10, Ubuntu 10.04, Debian 5, and ArchLinux.\n\nCookbooks\n----\n\nOpscode cookbooks\n\n* apache2\n\nTo install perl cpan modules for munin plugins\n\n* perl\n\nATTRIBUTES\n====\n\n* `['munin']['server_role']` - role of the munin server. Default is monitoring.\n* `['munin']['docroot']` - document root for the server apache vhost. on archlinux, the default is `/srv/http/munin`, or `/var/www/munin` on other platforms.\n\nRECIPES\n====\n\nclient\n----\n\nThe client recipe installs munin-node package and starts the service. It also searches for a node with the role for the munin server, by default `node['munin']['server_role']`. On Archlinux, it builds the list of plugins to enable.\n\nserver\n----\n\nThe server recipe will set up the munin server with Apache. It will create a cron job for generating the munin graphs, search for any nodes that have munin attributes (`node['munin']`), and use those nodes to connect for the graphs.\n\nUSAGE\n====\n\nCreate a role named `monitoring` that includes the munin::server recipe in the run list. Adjust the docroot to suit your environment.\n\n    % cat roles/monitoring.rb\n    name \"monitoring\"\n    description \"The monitoring server\"\n    run_list(\n      \"recipe[munin::server]\"\n    )\n\nApply this role to a node and it will be the munin server. Optionally create a DNS entry for it as munin, that will be used in the Apache vhost.\n\nClients will automatically search for the server based on the value of the `node['munin']['server_role']` attribute. If you don't use `monitoring` as the role name, change it in a role that is applied to any nodes that get the `munin::client` recipe.\n\nCustom Plugins\n----\n\nThis section describes how to add custom munin plugins.\n\nThe munin cookbook now has a definition that can be used to enable a new plugin for data gathering on a client. If an existing munin plugin is desired, call the definition\n\n    munin_plugin \"nfs_client\"\n\nBy default the plugin file name is the name parameter here. Specify the plugin parameter to use something else.\n\n    munin_plugin \"nfs_client\"\n      plugin \"nfs_client_\"\n    end\n\nThis creates a symlink from the plugins distribution directory, `/usr/share/munin/plugins` to the enabled plugins directory, `/etc/munin/plugins`, and once the server poller picks it up will have new graph data for that plugin. See the plugins distribution directory for available\n plugins or add your own.\n\nIf a custom plugin is required, add the plugin file to the munin cookbook in `site-cookbooks/munin/files/default/plugins`. Call the definition specifying that the plugin file should be downloaded from the cookbook.\n\n    munin_plugin \"nfs_client_custom\"\n      create_file true\n    end\n\nBy default in both cases, the plugin is enabled. If a plugin should be disabled, use the `enable` parameter\n\n    munin_plugin \"nfs_client_custom\"\n      enable false\n    end\n\nSome plugins may require other configuration. For example, to use the memcache plugins, you'll need the `Cache::Memcache` cpan module installed, and use the `munin_plugin` definition. The perl cookbook from opscode includes a definition to handle this easily.\n\n    cpan_module \"Cache::Memcached\"\n\nThen for example in your memcache recipe\n\n    %w(\n      memcached_bytes_\n      memcached_connections_\n      memcached_hits_\n      memcached_items_\n      memcached_requests_\n      memcached_responsetime_\n      memcached_traffic_\n    ).each do |plugin_name|\n      munin_plugin plugin_name do\n        plugin \"#{plugin_name}#{node[:ipaddress].gsub('.','_')}_#{node[:memcached][:port]}\"\n        create_file true\n      end\n    end\n\nLICENSE and AUTHOR\n====\n\nAuthor:: Nathan Haneysmith <nathan@opscode.com>\nAuthor:: Joshua Timberman <joshua@opscode.com>\n\nCopyright 2009-2011, Opscode, Inc\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
  "maintainer": "Opscode, Inc.",
  "maintainer_email": "cookbooks@opscode.com",
  "license": "Apache 2.0",
  "platforms": {
    "arch": [

    ],
    "debian": [

    ],
    "ubuntu": [

    ]
  },
  "dependencies": {
    "apache2": [

    ]
  },
  "recommendations": {
  },
  "suggestions": {
  },
  "conflicting": {
  },
  "providing": {
  },
  "replacing": {
  },
  "attributes": {
  },
  "groupings": {
  },
  "recipes": {
    "munin": "Empty, use one of the other recipes",
    "munin::client": "Instlls munin and configures a client by searching for the server, which should have a role named monitoring",
    "munin::server": "Installs munin and configures a server, node should have the role 'monitoring' so clients can find it"
  },
  "version": "0.10.1"
}